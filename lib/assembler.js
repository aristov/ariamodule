import { ElementAssembler } from 'dommodule'

const ARIA_PREFIX = 'aria-'
const ARIA_PREFIX_LENGTH = ARIA_PREFIX.length

const XHTML_NAMESPACE_URI = 'http://www.w3.org/1999/xhtml'

const { assign } = Object
const { prototype : { forEach } } = Array

export class ARIADOMAssembler extends ElementAssembler {

    init(init) {
        this.node.assembler = this
        return super.init(init)
    }

    set role(role) {
        this.node.setAttribute('role', role)
    }

    get role() {
        return this.node.getAttribute('role') || ''
    }

    set aria(aria) {
        const node = this.node
        for(let name in aria) {
            const value = aria[name]
            if(typeof value === 'string') {
                node.setAttribute(ARIA_PREFIX + name, value)
            }
        }
    }

    get aria() {
        const aria = {}
        forEach.call(this.node.attributes, ({ name, value }) => {
            if(name.startsWith(ARIA_PREFIX)) {
                aria[name.slice(ARIA_PREFIX_LENGTH)] = value
            }
        })
        return aria
    }

    /**
     * Set the element's [unique identifier (ID)](https://www.w3.org/TR/dom/#concept-id).
     * @param {String} id unique identifier of the element
     */
    set id(id) {
        super.id = id
    }

    /**
     * @returns {String} unique identifier, autogenerated if need
     */
    get id() {
        return super.id || (this.id = this.constructor.uniqid)
    }

    set dataset(dataset) {
        assign(this.node.dataset, dataset)
    }

    get dataset() {
        return this.node.dataset
    }

    set style(style) {
        assign(this.node.style, style)
    }

    get style() {
        return this.node.style
    }

    set tabIndex(tabIndex) {
        this.node.tabIndex = tabIndex
    }

    get tabIndex() {
        const node = this.node
        return node.hasAttribute('tabindex')? node.tabIndex : null
    }

    /**
     * Generate unique identifier
     * @returns {String} unique id
     */
    static get uniqid() {
        let id
        do id = this.name + Math.floor(Math.random() * 1e10)
        while(document.getElementById(id))
        return id
    }

    static get namespaceURI() {
        return XHTML_NAMESPACE_URI
    }
}
